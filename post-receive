#!/bin/bash
set -euxo pipefail

# To use this script as a hook for continuous deployment, create a
# file `hooks/post-receive` in the remote which calls it with sudo.

WORKDIR=~/piplayer
ENV=.env.production
build() {
  if ! docker build -t piplayer."$1" -f ./docker/"$1"/Dockerfile .
  then
    echo "Failed to build $1" 1>&2
    exit 1
  fi
}
image_of() {
  docker inspect $(docker ps | grep "$1" | awk '{print $1}') | grep Image | grep sha256
}

# From https://gist.github.com/deanrather/3697539
echo "Determining branch"
if ! [ -t 0 ]
then
  read -a ref
fi
BRANCH=$(sed 's,refs/heads/,,' <<< "${ref[2]}")

GIT_WORK_TREE="$WORKDIR" git checkout -f "$BRANCH"

if [[ "$BRANCH" == "deploy/production" ]] && [[ "$(hostname)" == "bier" ]]
then
  pushd "$WORKDIR"

  PROXY_WAS=$(image_of proxy)
  BACKEND_WAS=$(image_of backend)
  FRONTEND_WAS=$(image_of frontend)

  build proxy
  build backend
  build frontend

  ! [[ "$(docker ps | grep piplayer)" ]] || docker-compose --env-file $ENV down

  docker-compose --env-file="$ENV" up --force-recreate -d

  docker ps

  [[ "$PROXY_WAS" == "$(image_of proxy)" ]] && echo "Proxy unchanged" || echo "Proxy has new image"
  [[ "$BACKEND_WAS" == "$(image_of backend)" ]] && echo "Backend unchanged" || echo "Backend has new image"
  [[ "$FRONTEND_WAS" == "$(image_of frontend)" ]] && echo "Frontend unchanged" || echo "Frontend has new image"
  echo "Done"
fi
